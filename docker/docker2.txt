images
containers
registry -> repositories

docker-machine ls

BASIC
========
docker run busybox:1.24 echo "hello world"
docker run busybox:1.24 ls /
docker run -it busybox:1.24

docker run -d busybox:1.24 sleep 100
docker ps
docker ps -a

docker run --rm busybox:1.24 sleep 1

docker run --name hello_cont busybox:1.24

docker exec -it <cont_id> <command>

docker stop $(docker ps -a -q)
docker rm $(docker ps -a -q)

INSPECT
========
docker run -d busybox:1.24 sleep 100
docker inspect <cont_id>

PORTS
========
docker run -it -p 8888:8080 tomcat:8.0
docker run -it -d -p 8888:8080 tomcat:8.0
docker logs <cont_id>

LAYERS
========
docker history busybox:1.24 

BUILD
========
docker build -t	<repo>/image:<tag> <path>

COMMIT
========
docker run -it debian:jessie
	git
	apt-get update && apt-get install -y git
	git
	exit
docker commit <cont_id> <repo>/debian:<tag>
docker images

BUILD
========
Dockerfile
	FROM
	RUN
	CMD
	COPY
	ADD
	
docker build -t <repo>/debian:<tag> <path>
docker build -t <repo>/debian:<tag> <path> --no-cache=true

PUSH
========
docker tag <image_id> <repo>/debian:<tag>
docker login
docker push <repo>/debian:<tag> 

BUILD
========
docker build -t dockerapp:v0.1 .
docker run -d -p 5000:5000 <image_id>

VOLUME
===============
docker volume create my-vol
docker run -d --name devtest --mount source=myvol2,target=/app nginx:latest
docker service create -d --replicas=4 --name devtest-service --mount source=myvol2,target=/app nginx:latest
docker volume prune

PRUNE
==============
docker image prune
docker container prune
docker volume prune

BACKUP
===========
docker run --rm --volumes-from dbstore -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar /dbdata
docker run -v /dbdata --name dbstore2 ubuntu /bin/bash


SERVICE
==================
docker swarm init
docker service create --name redis redis:3.0.6
docker service create --mode global --name redis2 redis:3.0.6
docker service ls

docker login registry.example.com
docker service  create --with-registry-auth --name my_service registry.example.com/acme/my_image:latest

docker service create --name redis --replicas=5 redis:3.0.6

docker service create --name my-service --replicas 3 --mount type=volume,source=my-volume,destination=/path/in/container,volume-label="color=red",volume-label="shape=round" nginx:alpine

LINK
========
docker run -d --name redis redis:3.2.0
docker ps

docker build -t dockerapp:v0.3 .
docker run -d -p 5000:5000  --link redis <image_id>

OVERLAY
================
docker network create -d overlay my_overlay
docker service create --name appdomain --network my_overlay --publish 8001:8001 jboss
docker servise create --name newservice --network my_overlay --publish 8080:8080 

TRUST
===============
docker trust key generate ricardo
docker trust key load key.pem --name ricardo
docker trust signer add --key cert.pem ricardo dtr.example.com/admin/demo
docker trust sign dtr.example.com/admin/demo:1

export DOCKER_CONTENT_TRUST=1
docker push dtr.example.com/admin/demo:1

docker trust inspect --pretty dtr.example.com/admin/demo:1

#/etc/docker/daemon.json -> "content-trust": {"mode": "enforced"}

COMPOSE
========
docker-compose 
docker-compose up [-d]
docker-compose ps
docker-compose logs [-f]
docker-compose stop
docker-compose rm

docker-compose build
docker-compose up [-d]
